services:
  # PostgreSQL
  postgres-v2:
    image: 'postgres:15'
    container_name: ticket-postgres-v2
    environment:
      - POSTGRES_DB=ticket
      - POSTGRES_USER=ticket
      - POSTGRES_PASSWORD=ticketpass
    ports:
      - '5433:5432'
    volumes:
      - postgres_data_v2:/var/lib/postgresql/data
    networks:
      - ticket-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticket -d ticket"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis-v2:
    image: 'redis:7'
    container_name: ticket-redis-v2
    ports:
      - '6380:6379'
    volumes:
      - redis_data_v2:/data
    networks:
      - ticket-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # ⭐ API Service (새로 추가)
  api-service:
    build:
      context: .
      dockerfile: module-api/Dockerfile
    container_name: ticket-api
    ports:
      - '8082:8082'
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-v2:5432/ticket
      - SPRING_DATASOURCE_USERNAME=ticket
      - SPRING_DATASOURCE_PASSWORD=ticketpass
      - SPRING_DATA_REDIS_HOST=redis-v2
      - SPRING_DATA_REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-THIS_IS_A_LONG_RANDOM_PLAIN_SECRET_WITH_32+_CHARS_1234567890abcdef}
    depends_on:
      postgres-v2:
        condition: service_healthy
      redis-v2:
        condition: service_healthy
    networks:
      - ticket-network
    restart: unless-stopped

  # ⭐ Queue Service (새로 추가)
  queue-service:
    build:
      context: .
      dockerfile: module-queue/Dockerfile
    container_name: ticket-queue
    ports:
      - '8083:8083'
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-v2:5432/ticket
      - SPRING_DATASOURCE_USERNAME=ticket
      - SPRING_DATASOURCE_PASSWORD=ticketpass
      - SPRING_DATA_REDIS_HOST=redis-v2
      - SPRING_DATA_REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-THIS_IS_A_LONG_RANDOM_PLAIN_SECRET_WITH_32+_CHARS_1234567890abcdef}
    depends_on:
      postgres-v2:
        condition: service_healthy
      redis-v2:
        condition: service_healthy
    networks:
      - ticket-network
    restart: unless-stopped

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: ticket-nginx
    ports:
      - "8080:80"
    volumes:
      - ./infra/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api-service
      - queue-service
    networks:
      - ticket-network
    restart: unless-stopped

# ⭐ 네트워크 추가 (중요!)
networks:
  ticket-network:
    driver: bridge

volumes:
  postgres_data_v2:
  redis_data_v2: