# upstream 설정
upstream api_service   { server host.docker.internal:8082; keepalive 32; }
upstream queue_service { server host.docker.internal:8083; keepalive 32; }

# 프론트엔드 upstream (로컬 개발서버)
upstream frontend_client { server host.docker.internal:3000; keepalive 32; }
upstream frontend_admin  { server host.docker.internal:3001; keepalive 32; }
upstream frontend_accounts { server host.docker.internal:3002; keepalive 32; }

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# HTTPS 리다이렉트 서버
server {
    listen 80;
    server_name local.ddcn41.com local.admin.ddcn41.com local.accounts.ddcn41.com local.api.ddcn41.com;
    return 301 https://$server_name$request_uri;
}

# 메인 클라이언트 프론트엔드
server {
    listen 443 ssl;
    http2 on;
    server_name local.ddcn41.com;

    ssl_certificate /etc/nginx/certs/local.ddcn41.com.pem;
    ssl_certificate_key /etc/nginx/certs/local.ddcn41.com-key.pem;

    location / {
        proxy_pass http://frontend_client;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Hot reload 지원 (Vite HMR)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }
}

# 관리자 프론트엔드
server {
    listen 443 ssl;
    http2 on;
    server_name local.admin.ddcn41.com;

    ssl_certificate /etc/nginx/certs/local.ddcn41.com.pem;
    ssl_certificate_key /etc/nginx/certs/local.ddcn41.com-key.pem;

    location / {
        proxy_pass http://frontend_admin;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Hot reload 지원 (Vite HMR)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }
}

# 계정 프론트엔드 (Cognito 콜백 처리)
server {
    listen 443 ssl;
    http2 on;
    server_name local.accounts.ddcn41.com;

    ssl_certificate /etc/nginx/certs/local.ddcn41.com.pem;
    ssl_certificate_key /etc/nginx/certs/local.ddcn41.com-key.pem;

    location / {
        proxy_pass http://frontend_accounts;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Hot reload 지원 (Vite HMR)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }
}

# API 서버 통합 (local.api.ddcn41.com)
server {
    listen 443 ssl;
    http2 on;
    server_name local.api.ddcn41.com;

    ssl_certificate /etc/nginx/certs/local.ddcn41.com.pem;
    ssl_certificate_key /etc/nginx/certs/local.ddcn41.com-key.pem;

    # Preflight 요청 처리 (별도 location으로)
    location = /v1/options {
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin, X-Amz-Date, X-Api-Key, X-Amz-Security-Token" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age "3600" always;
            return 204;
        }
    }

    #큐 서비스
    location ^~ /v1/queue/ {
        # CORS 헤더
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials "true" always;

        # Preflight 처리
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age "3600" always;
            return 204;
        }

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        proxy_connect_timeout 60s;

        proxy_pass http://queue_service;
    }

    # 나머지 모든 /v1/* → API 서비스 (performances, ASG 등 모든 API)
    location /v1/ {
        # CORS 헤더
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials "true" always;

        # Preflight 처리
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age "3600" always;
            return 204;
        }

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 60s;

        # API 서비스로 전달
        proxy_pass http://api_service;
    }

    # 루트 경로: API 서비스로
    location / {
        # CORS 헤더
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials "true" always;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 60s;

        proxy_pass http://api_service;
    }
}